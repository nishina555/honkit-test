"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const assert_1 = __importDefault(require("assert"));
const __1 = __importDefault(require("../"));
var LEXED, PART;
beforeAll(function () {
    var CONTENT = fs_1.default.readFileSync(path_1.default.join(__dirname, "./fixtures/SUMMARY.adoc"), "utf8");
    LEXED = __1.default.summary(CONTENT);
    PART = LEXED.parts[0];
    // todo: add support for parts in asciidoc
});
it("should detect parts", function () {
    assert_1.default.equal(LEXED.parts.length, 1);
});
it("should detect articles", function () {
    assert_1.default.equal(PART.articles.length, 5);
});
it("should support articles", function () {
    assert_1.default.equal(PART.articles[0].articles.length, 2);
    assert_1.default.equal(PART.articles[1].articles.length, 0);
    assert_1.default.equal(PART.articles[2].articles.length, 0);
});
it("should detect paths and titles", function () {
    (0, assert_1.default)(PART.articles[0].ref);
    (0, assert_1.default)(PART.articles[1].ref);
    (0, assert_1.default)(PART.articles[2].ref);
    (0, assert_1.default)(PART.articles[3].ref);
    assert_1.default.equal(PART.articles[4].ref, null);
    (0, assert_1.default)(PART.articles[0].title);
    (0, assert_1.default)(PART.articles[1].title);
    (0, assert_1.default)(PART.articles[2].title);
    (0, assert_1.default)(PART.articles[3].title);
    (0, assert_1.default)(PART.articles[4].title);
});
it("should normalize paths from .md", function () {
    assert_1.default.equal(PART.articles[0].ref, "chapter-1/README.adoc");
    assert_1.default.equal(PART.articles[1].ref, "chapter-2/README.adoc");
    assert_1.default.equal(PART.articles[2].ref, "chapter-3/README.adoc");
});
it("should correctly convert it to text", function () {
    var text = __1.default.summary.toText(LEXED);
    assert_1.default.deepEqual(__1.default.summary(text), LEXED);
});
